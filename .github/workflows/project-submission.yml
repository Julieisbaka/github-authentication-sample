name: Project Submission Workflow

on:
  # Handle OAuth callback
  repository_dispatch:
    types: [oauth-callback]
  
  # Handle project submissions
  issues:
    types: [opened]
  
  # This is for direct API access from client
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'handle_oauth'
      code:
        description: 'OAuth code'
        required: false
      callback_id:
        description: 'Callback ID for response'
        required: false

jobs:
  handle_oauth:
    if: github.event_name == 'repository_dispatch' && github.event.action == 'oauth-callback' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'handle_oauth')
    runs-on: ubuntu-latest
    steps:
      - name: Exchange code for token
        id: token_exchange
        env:
          CLIENT_ID: 'Ov23liYJv9yGDtXz1DDK'  # Your actual Client ID
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          CODE: ${{ github.event.client_payload.code || github.event.inputs.code }}
        run: |
          RESPONSE=$(curl -s -X POST \
            -H "Accept: application/json" \
            -d "client_id=${CLIENT_ID}&client_secret=${CLIENT_SECRET}&code=${CODE}" \
            https://github.com/login/oauth/access_token)
          
          # Extract token from response
          TOKEN=$(echo $RESPONSE | jq -r '.access_token')
          
          # Check if token was obtained successfully
          if [[ "$TOKEN" == "null" || -z "$TOKEN" ]]; then
            echo "Failed to obtain token. Response: $RESPONSE"
            exit 1
          fi
          
          echo "token=${TOKEN}" >> $GITHUB_OUTPUT
      
      - name: Return token to client
        if: success()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const callbackId = context.payload.client_payload?.callback_id || 
                              context.payload.inputs?.callback_id || 
                              new Date().getTime();
            
            // Create a gist with the token (this will be deleted after retrieval)
            const token = '${{ steps.token_exchange.outputs.token }}';
            const gistContent = JSON.stringify({ token, timestamp: new Date().toISOString() });
            
            // Create a gist with a unique name based on the callback ID
            const gist = await github.rest.gists.create({
              files: {
                [`token-${callbackId}.json`]: {
                  content: gistContent
                }
              },
              description: 'Temporary authentication token (auto-deleted)',
              public: false
            });
            
            console.log(`Token gist created with ID: ${gist.data.id}`);
            console.log(`Client should retrieve from: ${gist.data.html_url}`);
            
            // Schedule deletion of the gist after 5 minutes
            setTimeout(async () => {
              try {
                await github.rest.gists.delete({ gist_id: gist.data.id });
                console.log('Token gist deleted successfully');
              } catch (error) {
                console.error('Error deleting token gist:', error);
              }
            }, 5 * 60 * 1000);

  process_submission:
    if: github.event_name == 'issues' && contains(github.event.issue.title, '[Project Submission]')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Extract project data
        id: extract_data
        run: |
          # Parse JSON from issue body
          BODY="${{ github.event.issue.body }}"
          echo "$BODY" > project_data.json
          
          # Validate the JSON
          cat project_data.json | jq
      
      - name: Update projects file
        run: |
          # Get and update projects.json
          if [ -f "data/projects.json" ]; then
            # Add the new project to existing data
            jq -s '.[0] + [.[1]]' data/projects.json project_data.json > temp.json
            mv temp.json data/projects.json
          else
            # Create data directory if it doesn't exist
            mkdir -p data
            # Create new projects.json with this submission as the first entry
            echo '[' > data/projects.json
            cat project_data.json >> data/projects.json
            echo ']' >> data/projects.json
          fi
      
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          commit-message: 'Add new project submission'
          title: 'New Project Submission'
          body: |
            This PR adds a new project submission from issue #${{ github.event.issue.number }}
            
            Project Name: $(cat project_data.json | jq -r '.name')
            Submitted by: $(cat project_data.json | jq -r '.user')
          branch: project-submission-${{ github.event.issue.number }}
      
      - name: Close Issue
        uses: peter-evans/close-issue@v3
        with:
          issue-number: ${{ github.event.issue.number }}
          comment: |
            Thank you for your submission! A pull request has been created to add your project.
            It will be reviewed and merged soon.